# ===== GIT ALIASES AND SHORTCUTS =====

# Basic Git shortcuts
alias g='git'
alias ga='git add'
alias gaa='git add .'
alias gau='git add -u'          # Add only tracked files
alias gap='git add -p'          # Interactive add (patch mode)

# Status and info
alias gs='git status'
alias gss='git status -s'       # Short status
alias gl='git log --oneline'
alias glo='git log --oneline --graph --decorate --all'
alias gll='git log --graph --pretty=format:"%C(yellow)%h%C(reset) - %C(green)(%cr)%C(reset) %s %C(blue)<%an>%C(reset)%C(red)%d%C(reset)" --abbrev-commit --all'

# Commit shortcuts
alias gc='git commit'
alias gcm='git commit -m'
alias gca='git commit -a'
alias gcam='git commit -am'
alias gcf='git commit --fixup'   # Fixup commit
alias gce='git commit --amend'
alias gcne='git commit --amend --no-edit'

# Branch operations
alias gb='git branch'
alias gba='git branch -a'       # All branches
alias gbd='git branch -d'       # Delete branch
alias gbD='git branch -D'       # Force delete branch
alias gco='git checkout'
alias gcb='git checkout -b'     # Create and checkout new branch
alias gsw='git switch'          # Modern alternative to checkout
alias gswc='git switch -c'      # Create and switch to new branch

# Stash operations
alias gst='git stash'
alias gstp='git stash pop'
alias gstl='git stash list'
alias gsts='git stash show'
alias gstd='git stash drop'

# Remote operations
alias gf='git fetch'
alias gfa='git fetch --all'
alias gp='git push'
alias gpo='git push origin'
alias gpu='git push -u origin'  # Push and set upstream
alias gpf='git push --force-with-lease'  # Safer force push
alias gpl='git pull'
alias gpr='git pull --rebase'

# Diff and show
alias gd='git diff'
alias gds='git diff --staged'
alias gdh='git diff HEAD'
alias gdt='git difftool'

# Reset and restore
alias grh='git reset HEAD'      # Unstage files
alias grha='git reset HEAD .'  # Unstage all files
alias grhh='git reset --hard HEAD'  # Hard reset to HEAD
alias grs='git restore'        # Restore working tree files
alias grss='git restore --staged'  # Unstage files (modern way)

# Rebase and merge
alias grb='git rebase'
alias grbi='git rebase -i'      # Interactive rebase
alias grbc='git rebase --continue'
alias grba='git rebase --abort'
alias gm='git merge'
alias gmn='git merge --no-ff'   # No fast-forward merge

# Cherry-pick
alias gcp='git cherry-pick'
alias gcpc='git cherry-pick --continue'
alias gcpa='git cherry-pick --abort'

# Tags
alias gt='git tag'
alias gts='git tag -s'          # Signed tag
alias gtl='git tag -l'          # List tags

# Worktree (for multiple working directories)
alias gwt='git worktree'
alias gwta='git worktree add'
alias gwtl='git worktree list'
alias gwtr='git worktree remove'

# ===== ADVANCED GIT FUNCTIONS =====

# Function to create and switch to a new branch from current branch
gnb() {
    if [ -z "$1" ]; then
        echo "Usage: gnb <branch-name>"
        return 1
    fi
    git checkout -b "$1"
}

# Function to delete local and remote branch
gbd() {
    if [ -z "$1" ]; then
        echo "Usage: gbd <branch-name>"
        return 1
    fi
    git branch -d "$1" && git push origin --delete "$1"
}

# Function to commit and push in one command
gcp() {
    if [ -z "$1" ]; then
        echo "Usage: gcp 'commit message'"
        return 1
    fi
    git add . && git commit -m "$1" && git push
}

# Function to update all branches
gup() {
    git fetch --all
    git branch -r | grep -v '\->' | while read remote; do 
        git branch --track "${remote#origin/}" "$remote" 2>/dev/null
    done
    git fetch --all
    git pull --all 2>/dev/null
}

# Function to show git log with file changes
glf() {
    git log --follow -p -- "$1"
}

# Function to find commits by message
gfind() {
    if [ -z "$1" ]; then
        echo "Usage: gfind 'search term'"
        return 1
    fi
    git log --grep="$1" --oneline
}

# Function to show what changed in last commit
glast() {
    git show --stat HEAD
}

# Function to create a new repository and push to origin
ginit() {
    git init
    git add .
    git commit -m "Initial commit"
    if [ ! -z "$1" ]; then
        git remote add origin "$1"
        git push -u origin main
    fi
}

# Function to clean up merged branches
gclean() {
    git branch --merged | grep -v "\*\|main\|master\|develop" | xargs -n 1 git branch -d
}

# Function to show current branch name (useful for prompts)
current_branch() {
    git symbolic-ref --quiet --short HEAD 2>/dev/null
}

# ===== GIT + FZF INTEGRATION =====
# (These require fzf to be installed)

# Interactive git add
gadd() {
    git status --porcelain | fzf -m --preview 'git diff --color=always {2}' | awk '{print $2}' | xargs git add
}

# Interactive git checkout branch
gfco() {
    git branch -a | sed 's/remotes\/origin\///' | sort -u | fzf | xargs git checkout
}

# Interactive git log
gflog() {
    git log --oneline --color=always | fzf --ansi --preview 'git show --color=always {1}' | awk '{print $1}' | xargs git show
}

# Interactive file history
gfh() {
    git log --oneline --follow -- "$1" | fzf --preview "git show --color=always {1} -- $1"
}

# ===== USEFUL GIT CONFIGURATIONS =====
# These set up some useful git configs (run once)
git_setup() {
    echo "Setting up useful git configurations..."
    
    # Better diffs
    git config --global diff.tool vimdiff
    git config --global merge.tool vimdiff
    
    # Push current branch by default
    git config --global push.default current
    
    # Prettier logs
    git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
    
    # Automatic stash before rebase
    git config --global rebase.autoStash true
    
    # Use main as default branch
    git config --global init.defaultBranch main
    
    echo "Git configuration complete!"
}

# ===== DEVELOPMENT WORKFLOW SHORTCUTS =====

# Quick commit and push workflow
alias work='git add . && git commit -m "WIP: $(date)" && git push'

# Save work in progress
alias wip='git add . && git commit -m "WIP: work in progress"'

# Undo last commit but keep changes
alias undo='git reset --soft HEAD~1'

# Quick fixup and autosquash
fixup() {
    git add . && git commit --fixup="$1" && git rebase -i --autosquash "$1"~1
}

# Show files changed in last commit
alias changed='git diff-tree --no-commit-id --name-only -r HEAD'

# Show current repository status in a compact way
alias repo='echo "=== Branch ===" && git branch --show-current && echo "\n=== Status ===" && git status -s && echo "\n=== Last commit ===" && git log -1 --oneline'
